/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xq.foundation.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-18")
public class ThriftService {

  public interface Iface {

    public ThriftResultStrcut doProcess(String cmd, String seq, ThriftCmdStruct body) throws TException;

  }

  public interface AsyncIface {

    public void doProcess(String cmd, String seq, ThriftCmdStruct body, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ThriftResultStrcut doProcess(String cmd, String seq, ThriftCmdStruct body) throws TException
    {
      send_doProcess(cmd, seq, body);
      return recv_doProcess();
    }

    public void send_doProcess(String cmd, String seq, ThriftCmdStruct body) throws TException
    {
      doProcess_args args = new doProcess_args();
      args.setCmd(cmd);
      args.setSeq(seq);
      args.setBody(body);
      sendBase("doProcess", args);
    }

    public ThriftResultStrcut recv_doProcess() throws TException
    {
      doProcess_result result = new doProcess_result();
      receiveBase(result, "doProcess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doProcess failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doProcess(String cmd, String seq, ThriftCmdStruct body, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      doProcess_call method_call = new doProcess_call(cmd, seq, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doProcess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cmd;
      private String seq;
      private ThriftCmdStruct body;
      public doProcess_call(String cmd, String seq, ThriftCmdStruct body, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cmd = cmd;
        this.seq = seq;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doProcess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doProcess_args args = new doProcess_args();
        args.setCmd(cmd);
        args.setSeq(seq);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftResultStrcut getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doProcess();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doProcess", new doProcess());
      return processMap;
    }

    public static class doProcess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doProcess_args> {
      public doProcess() {
        super("doProcess");
      }

      public doProcess_args getEmptyArgsInstance() {
        return new doProcess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doProcess_result getResult(I iface, doProcess_args args) throws TException {
        doProcess_result result = new doProcess_result();
        result.success = iface.doProcess(args.cmd, args.seq, args.body);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doProcess", new doProcess());
      return processMap;
    }

    public static class doProcess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doProcess_args, ThriftResultStrcut> {
      public doProcess() {
        super("doProcess");
      }

      public doProcess_args getEmptyArgsInstance() {
        return new doProcess_args();
      }

      public AsyncMethodCallback<ThriftResultStrcut> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftResultStrcut>() {
          public void onComplete(ThriftResultStrcut o) {
            doProcess_result result = new doProcess_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (TException e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            //byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            byte msgType;
            org.apache.thrift.TBase msg;
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (TException ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doProcess_args args, AsyncMethodCallback<ThriftResultStrcut> resultHandler) throws TException {
        iface.doProcess(args.cmd, args.seq, args.body,resultHandler);
      }
    }

  }

  public static class doProcess_args implements org.apache.thrift.TBase<doProcess_args, doProcess_args._Fields>, java.io.Serializable, Cloneable, Comparable<doProcess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doProcess_args");

    private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doProcess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doProcess_argsTupleSchemeFactory());
    }

    public String cmd; // required
    public String seq; // required
    public ThriftCmdStruct body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CMD((short)1, "cmd"),
      SEQ((short)2, "seq"),
      BODY((short)3, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CMD
            return CMD;
          case 2: // SEQ
            return SEQ;
          case 3: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCmdStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doProcess_args.class, metaDataMap);
    }

    public doProcess_args() {
    }

    public doProcess_args(
            String cmd,
            String seq,
            ThriftCmdStruct body)
    {
      this();
      this.cmd = cmd;
      this.seq = seq;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doProcess_args(doProcess_args other) {
      if (other.isSetCmd()) {
        this.cmd = other.cmd;
      }
      if (other.isSetSeq()) {
        this.seq = other.seq;
      }
      if (other.isSetBody()) {
        this.body = new ThriftCmdStruct(other.body);
      }
    }

    public doProcess_args deepCopy() {
      return new doProcess_args(this);
    }

    @Override
    public void clear() {
      this.cmd = null;
      this.seq = null;
      this.body = null;
    }

    public String getCmd() {
      return this.cmd;
    }

    public doProcess_args setCmd(String cmd) {
      this.cmd = cmd;
      return this;
    }

    public void unsetCmd() {
      this.cmd = null;
    }

    /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
    public boolean isSetCmd() {
      return this.cmd != null;
    }

    public void setCmdIsSet(boolean value) {
      if (!value) {
        this.cmd = null;
      }
    }

    public String getSeq() {
      return this.seq;
    }

    public doProcess_args setSeq(String seq) {
      this.seq = seq;
      return this;
    }

    public void unsetSeq() {
      this.seq = null;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return this.seq != null;
    }

    public void setSeqIsSet(boolean value) {
      if (!value) {
        this.seq = null;
      }
    }

    public ThriftCmdStruct getBody() {
      return this.body;
    }

    public doProcess_args setBody(ThriftCmdStruct body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case CMD:
          if (value == null) {
            unsetCmd();
          } else {
            setCmd((String)value);
          }
          break;

        case SEQ:
          if (value == null) {
            unsetSeq();
          } else {
            setSeq((String)value);
          }
          break;

        case BODY:
          if (value == null) {
            unsetBody();
          } else {
            setBody((ThriftCmdStruct)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case CMD:
          return getCmd();

        case SEQ:
          return getSeq();

        case BODY:
          return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case CMD:
          return isSetCmd();
        case SEQ:
          return isSetSeq();
        case BODY:
          return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doProcess_args)
        return this.equals((doProcess_args)that);
      return false;
    }

    public boolean equals(doProcess_args that) {
      if (that == null)
        return false;

      boolean this_present_cmd = true && this.isSetCmd();
      boolean that_present_cmd = true && that.isSetCmd();
      if (this_present_cmd || that_present_cmd) {
        if (!(this_present_cmd && that_present_cmd))
          return false;
        if (!this.cmd.equals(that.cmd))
          return false;
      }

      boolean this_present_seq = true && this.isSetSeq();
      boolean that_present_seq = true && that.isSetSeq();
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (!this.seq.equals(that.seq))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cmd = true && (isSetCmd());
      list.add(present_cmd);
      if (present_cmd)
        list.add(cmd);

      boolean present_seq = true && (isSetSeq());
      list.add(present_seq);
      if (present_seq)
        list.add(seq);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(doProcess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doProcess_args(");
      boolean first = true;

      sb.append("cmd:");
      if (this.cmd == null) {
        sb.append("null");
      } else {
        sb.append(this.cmd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seq:");
      if (this.seq == null) {
        sb.append("null");
      } else {
        sb.append(this.seq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (body != null) {
        body.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doProcess_argsStandardSchemeFactory implements SchemeFactory {
      public doProcess_argsStandardScheme getScheme() {
        return new doProcess_argsStandardScheme();
      }
    }

    private static class doProcess_argsStandardScheme extends StandardScheme<doProcess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doProcess_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cmd = iprot.readString();
                struct.setCmdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.seq = iprot.readString();
                struct.setSeqIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.body = new ThriftCmdStruct();
                struct.body.read(iprot);
                struct.setBodyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doProcess_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cmd != null) {
          oprot.writeFieldBegin(CMD_FIELD_DESC);
          oprot.writeString(struct.cmd);
          oprot.writeFieldEnd();
        }
        if (struct.seq != null) {
          oprot.writeFieldBegin(SEQ_FIELD_DESC);
          oprot.writeString(struct.seq);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          struct.body.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doProcess_argsTupleSchemeFactory implements SchemeFactory {
      public doProcess_argsTupleScheme getScheme() {
        return new doProcess_argsTupleScheme();
      }
    }

    private static class doProcess_argsTupleScheme extends TupleScheme<doProcess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doProcess_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCmd()) {
          optionals.set(0);
        }
        if (struct.isSetSeq()) {
          optionals.set(1);
        }
        if (struct.isSetBody()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCmd()) {
          oprot.writeString(struct.cmd);
        }
        if (struct.isSetSeq()) {
          oprot.writeString(struct.seq);
        }
        if (struct.isSetBody()) {
          struct.body.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doProcess_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cmd = iprot.readString();
          struct.setCmdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.seq = iprot.readString();
          struct.setSeqIsSet(true);
        }
        if (incoming.get(2)) {
          struct.body = new ThriftCmdStruct();
          struct.body.read(iprot);
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class doProcess_result implements org.apache.thrift.TBase<doProcess_result, doProcess_result._Fields>, java.io.Serializable, Cloneable, Comparable<doProcess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doProcess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doProcess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doProcess_resultTupleSchemeFactory());
    }

    public ThriftResultStrcut success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftResultStrcut.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doProcess_result.class, metaDataMap);
    }

    public doProcess_result() {
    }

    public doProcess_result(
            ThriftResultStrcut success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doProcess_result(doProcess_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftResultStrcut(other.success);
      }
    }

    public doProcess_result deepCopy() {
      return new doProcess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ThriftResultStrcut getSuccess() {
      return this.success;
    }

    public doProcess_result setSuccess(ThriftResultStrcut success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((ThriftResultStrcut)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doProcess_result)
        return this.equals((doProcess_result)that);
      return false;
    }

    public boolean equals(doProcess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doProcess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doProcess_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doProcess_resultStandardSchemeFactory implements SchemeFactory {
      public doProcess_resultStandardScheme getScheme() {
        return new doProcess_resultStandardScheme();
      }
    }

    private static class doProcess_resultStandardScheme extends StandardScheme<doProcess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doProcess_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftResultStrcut();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doProcess_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doProcess_resultTupleSchemeFactory implements SchemeFactory {
      public doProcess_resultTupleScheme getScheme() {
        return new doProcess_resultTupleScheme();
      }
    }

    private static class doProcess_resultTupleScheme extends TupleScheme<doProcess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doProcess_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doProcess_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ThriftResultStrcut();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
