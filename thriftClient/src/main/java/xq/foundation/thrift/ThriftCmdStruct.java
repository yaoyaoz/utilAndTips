/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xq.foundation.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-18")
public class ThriftCmdStruct implements org.apache.thrift.TBase<ThriftCmdStruct, ThriftCmdStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftCmdStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftCmdStruct");

  private static final org.apache.thrift.protocol.TField IMG_A_FIELD_DESC = new org.apache.thrift.protocol.TField("imgA", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMG_B_FIELD_DESC = new org.apache.thrift.protocol.TField("imgB", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_A_FIELD_DESC = new org.apache.thrift.protocol.TField("featureA", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_B_FIELD_DESC = new org.apache.thrift.protocol.TField("featureB", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftCmdStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftCmdStructTupleSchemeFactory());
  }

  public ByteBuffer imgA; // required
  public ByteBuffer imgB; // required
  public ByteBuffer featureA; // required
  public ByteBuffer featureB; // required
  public String param; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMG_A((short)1, "imgA"),
    IMG_B((short)2, "imgB"),
    FEATURE_A((short)3, "featureA"),
    FEATURE_B((short)4, "featureB"),
    PARAM((short)5, "param");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMG_A
          return IMG_A;
        case 2: // IMG_B
          return IMG_B;
        case 3: // FEATURE_A
          return FEATURE_A;
        case 4: // FEATURE_B
          return FEATURE_B;
        case 5: // PARAM
          return PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMG_A, new org.apache.thrift.meta_data.FieldMetaData("imgA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IMG_B, new org.apache.thrift.meta_data.FieldMetaData("imgB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FEATURE_A, new org.apache.thrift.meta_data.FieldMetaData("featureA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FEATURE_B, new org.apache.thrift.meta_data.FieldMetaData("featureB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftCmdStruct.class, metaDataMap);
  }

  public ThriftCmdStruct() {
  }

  public ThriftCmdStruct(
    ByteBuffer imgA,
    ByteBuffer imgB,
    ByteBuffer featureA,
    ByteBuffer featureB,
    String param)
  {
    this();
    this.imgA = org.apache.thrift.TBaseHelper.copyBinary(imgA);
    this.imgB = org.apache.thrift.TBaseHelper.copyBinary(imgB);
    this.featureA = org.apache.thrift.TBaseHelper.copyBinary(featureA);
    this.featureB = org.apache.thrift.TBaseHelper.copyBinary(featureB);
    this.param = param;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftCmdStruct(ThriftCmdStruct other) {
    if (other.isSetImgA()) {
      this.imgA = org.apache.thrift.TBaseHelper.copyBinary(other.imgA);
    }
    if (other.isSetImgB()) {
      this.imgB = org.apache.thrift.TBaseHelper.copyBinary(other.imgB);
    }
    if (other.isSetFeatureA()) {
      this.featureA = org.apache.thrift.TBaseHelper.copyBinary(other.featureA);
    }
    if (other.isSetFeatureB()) {
      this.featureB = org.apache.thrift.TBaseHelper.copyBinary(other.featureB);
    }
    if (other.isSetParam()) {
      this.param = other.param;
    }
  }

  public ThriftCmdStruct deepCopy() {
    return new ThriftCmdStruct(this);
  }

  @Override
  public void clear() {
    this.imgA = null;
    this.imgB = null;
    this.featureA = null;
    this.featureB = null;
    this.param = null;
  }

  public byte[] getImgA() {
    setImgA(org.apache.thrift.TBaseHelper.rightSize(imgA));
    return imgA == null ? null : imgA.array();
  }

  public ByteBuffer bufferForImgA() {
    return org.apache.thrift.TBaseHelper.copyBinary(imgA);
  }

  public ThriftCmdStruct setImgA(byte[] imgA) {
    this.imgA = imgA == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(imgA, imgA.length));
    return this;
  }

  public ThriftCmdStruct setImgA(ByteBuffer imgA) {
    this.imgA = org.apache.thrift.TBaseHelper.copyBinary(imgA);
    return this;
  }

  public void unsetImgA() {
    this.imgA = null;
  }

  /** Returns true if field imgA is set (has been assigned a value) and false otherwise */
  public boolean isSetImgA() {
    return this.imgA != null;
  }

  public void setImgAIsSet(boolean value) {
    if (!value) {
      this.imgA = null;
    }
  }

  public byte[] getImgB() {
    setImgB(org.apache.thrift.TBaseHelper.rightSize(imgB));
    return imgB == null ? null : imgB.array();
  }

  public ByteBuffer bufferForImgB() {
    return org.apache.thrift.TBaseHelper.copyBinary(imgB);
  }

  public ThriftCmdStruct setImgB(byte[] imgB) {
    this.imgB = imgB == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(imgB, imgB.length));
    return this;
  }

  public ThriftCmdStruct setImgB(ByteBuffer imgB) {
    this.imgB = org.apache.thrift.TBaseHelper.copyBinary(imgB);
    return this;
  }

  public void unsetImgB() {
    this.imgB = null;
  }

  /** Returns true if field imgB is set (has been assigned a value) and false otherwise */
  public boolean isSetImgB() {
    return this.imgB != null;
  }

  public void setImgBIsSet(boolean value) {
    if (!value) {
      this.imgB = null;
    }
  }

  public byte[] getFeatureA() {
    setFeatureA(org.apache.thrift.TBaseHelper.rightSize(featureA));
    return featureA == null ? null : featureA.array();
  }

  public ByteBuffer bufferForFeatureA() {
    return org.apache.thrift.TBaseHelper.copyBinary(featureA);
  }

  public ThriftCmdStruct setFeatureA(byte[] featureA) {
    this.featureA = featureA == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(featureA, featureA.length));
    return this;
  }

  public ThriftCmdStruct setFeatureA(ByteBuffer featureA) {
    this.featureA = org.apache.thrift.TBaseHelper.copyBinary(featureA);
    return this;
  }

  public void unsetFeatureA() {
    this.featureA = null;
  }

  /** Returns true if field featureA is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureA() {
    return this.featureA != null;
  }

  public void setFeatureAIsSet(boolean value) {
    if (!value) {
      this.featureA = null;
    }
  }

  public byte[] getFeatureB() {
    setFeatureB(org.apache.thrift.TBaseHelper.rightSize(featureB));
    return featureB == null ? null : featureB.array();
  }

  public ByteBuffer bufferForFeatureB() {
    return org.apache.thrift.TBaseHelper.copyBinary(featureB);
  }

  public ThriftCmdStruct setFeatureB(byte[] featureB) {
    this.featureB = featureB == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(featureB, featureB.length));
    return this;
  }

  public ThriftCmdStruct setFeatureB(ByteBuffer featureB) {
    this.featureB = org.apache.thrift.TBaseHelper.copyBinary(featureB);
    return this;
  }

  public void unsetFeatureB() {
    this.featureB = null;
  }

  /** Returns true if field featureB is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureB() {
    return this.featureB != null;
  }

  public void setFeatureBIsSet(boolean value) {
    if (!value) {
      this.featureB = null;
    }
  }

  public String getParam() {
    return this.param;
  }

  public ThriftCmdStruct setParam(String param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMG_A:
      if (value == null) {
        unsetImgA();
      } else {
        setImgA((ByteBuffer)value);
      }
      break;

    case IMG_B:
      if (value == null) {
        unsetImgB();
      } else {
        setImgB((ByteBuffer)value);
      }
      break;

    case FEATURE_A:
      if (value == null) {
        unsetFeatureA();
      } else {
        setFeatureA((ByteBuffer)value);
      }
      break;

    case FEATURE_B:
      if (value == null) {
        unsetFeatureB();
      } else {
        setFeatureB((ByteBuffer)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMG_A:
      return getImgA();

    case IMG_B:
      return getImgB();

    case FEATURE_A:
      return getFeatureA();

    case FEATURE_B:
      return getFeatureB();

    case PARAM:
      return getParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMG_A:
      return isSetImgA();
    case IMG_B:
      return isSetImgB();
    case FEATURE_A:
      return isSetFeatureA();
    case FEATURE_B:
      return isSetFeatureB();
    case PARAM:
      return isSetParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftCmdStruct)
      return this.equals((ThriftCmdStruct)that);
    return false;
  }

  public boolean equals(ThriftCmdStruct that) {
    if (that == null)
      return false;

    boolean this_present_imgA = true && this.isSetImgA();
    boolean that_present_imgA = true && that.isSetImgA();
    if (this_present_imgA || that_present_imgA) {
      if (!(this_present_imgA && that_present_imgA))
        return false;
      if (!this.imgA.equals(that.imgA))
        return false;
    }

    boolean this_present_imgB = true && this.isSetImgB();
    boolean that_present_imgB = true && that.isSetImgB();
    if (this_present_imgB || that_present_imgB) {
      if (!(this_present_imgB && that_present_imgB))
        return false;
      if (!this.imgB.equals(that.imgB))
        return false;
    }

    boolean this_present_featureA = true && this.isSetFeatureA();
    boolean that_present_featureA = true && that.isSetFeatureA();
    if (this_present_featureA || that_present_featureA) {
      if (!(this_present_featureA && that_present_featureA))
        return false;
      if (!this.featureA.equals(that.featureA))
        return false;
    }

    boolean this_present_featureB = true && this.isSetFeatureB();
    boolean that_present_featureB = true && that.isSetFeatureB();
    if (this_present_featureB || that_present_featureB) {
      if (!(this_present_featureB && that_present_featureB))
        return false;
      if (!this.featureB.equals(that.featureB))
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_imgA = true && (isSetImgA());
    list.add(present_imgA);
    if (present_imgA)
      list.add(imgA);

    boolean present_imgB = true && (isSetImgB());
    list.add(present_imgB);
    if (present_imgB)
      list.add(imgB);

    boolean present_featureA = true && (isSetFeatureA());
    list.add(present_featureA);
    if (present_featureA)
      list.add(featureA);

    boolean present_featureB = true && (isSetFeatureB());
    list.add(present_featureB);
    if (present_featureB)
      list.add(featureB);

    boolean present_param = true && (isSetParam());
    list.add(present_param);
    if (present_param)
      list.add(param);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftCmdStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImgA()).compareTo(other.isSetImgA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgA, other.imgA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgB()).compareTo(other.isSetImgB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgB, other.imgB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureA()).compareTo(other.isSetFeatureA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureA, other.featureA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureB()).compareTo(other.isSetFeatureB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureB, other.featureB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftCmdStruct(");
    boolean first = true;

    sb.append("imgA:");
    if (this.imgA == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.imgA, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgB:");
    if (this.imgB == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.imgB, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureA:");
    if (this.featureA == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.featureA, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureB:");
    if (this.featureB == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.featureB, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param:");
    if (this.param == null) {
      sb.append("null");
    } else {
      sb.append(this.param);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftCmdStructStandardSchemeFactory implements SchemeFactory {
    public ThriftCmdStructStandardScheme getScheme() {
      return new ThriftCmdStructStandardScheme();
    }
  }

  private static class ThriftCmdStructStandardScheme extends StandardScheme<ThriftCmdStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftCmdStruct struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMG_A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgA = iprot.readBinary();
              struct.setImgAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMG_B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgB = iprot.readBinary();
              struct.setImgBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE_A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.featureA = iprot.readBinary();
              struct.setFeatureAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURE_B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.featureB = iprot.readBinary();
              struct.setFeatureBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param = iprot.readString();
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftCmdStruct struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imgA != null) {
        oprot.writeFieldBegin(IMG_A_FIELD_DESC);
        oprot.writeBinary(struct.imgA);
        oprot.writeFieldEnd();
      }
      if (struct.imgB != null) {
        oprot.writeFieldBegin(IMG_B_FIELD_DESC);
        oprot.writeBinary(struct.imgB);
        oprot.writeFieldEnd();
      }
      if (struct.featureA != null) {
        oprot.writeFieldBegin(FEATURE_A_FIELD_DESC);
        oprot.writeBinary(struct.featureA);
        oprot.writeFieldEnd();
      }
      if (struct.featureB != null) {
        oprot.writeFieldBegin(FEATURE_B_FIELD_DESC);
        oprot.writeBinary(struct.featureB);
        oprot.writeFieldEnd();
      }
      if (struct.param != null) {
        oprot.writeFieldBegin(PARAM_FIELD_DESC);
        oprot.writeString(struct.param);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftCmdStructTupleSchemeFactory implements SchemeFactory {
    public ThriftCmdStructTupleScheme getScheme() {
      return new ThriftCmdStructTupleScheme();
    }
  }

  private static class ThriftCmdStructTupleScheme extends TupleScheme<ThriftCmdStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftCmdStruct struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetImgA()) {
        optionals.set(0);
      }
      if (struct.isSetImgB()) {
        optionals.set(1);
      }
      if (struct.isSetFeatureA()) {
        optionals.set(2);
      }
      if (struct.isSetFeatureB()) {
        optionals.set(3);
      }
      if (struct.isSetParam()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetImgA()) {
        oprot.writeBinary(struct.imgA);
      }
      if (struct.isSetImgB()) {
        oprot.writeBinary(struct.imgB);
      }
      if (struct.isSetFeatureA()) {
        oprot.writeBinary(struct.featureA);
      }
      if (struct.isSetFeatureB()) {
        oprot.writeBinary(struct.featureB);
      }
      if (struct.isSetParam()) {
        oprot.writeString(struct.param);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftCmdStruct struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.imgA = iprot.readBinary();
        struct.setImgAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imgB = iprot.readBinary();
        struct.setImgBIsSet(true);
      }
      if (incoming.get(2)) {
        struct.featureA = iprot.readBinary();
        struct.setFeatureAIsSet(true);
      }
      if (incoming.get(3)) {
        struct.featureB = iprot.readBinary();
        struct.setFeatureBIsSet(true);
      }
      if (incoming.get(4)) {
        struct.param = iprot.readString();
        struct.setParamIsSet(true);
      }
    }
  }

}

